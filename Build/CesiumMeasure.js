/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var CesiumMeasure;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./plugin/cesium-measure.js":
/*!**********************************!*\
  !*** ./plugin/cesium-measure.js ***!
  \**********************************/
/***/ (() => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n;\nif (typeof Cesium !== 'undefined')\n  /**\r\n  * @author zhangti\r\n  * @param viewer  {object} 三维对象\r\n  * @param options {object} 初始化参数\r\n  * @constructor\r\n  */\n  Cesium.Measure = function (Cesium) {\n    /**\r\n     * 绘制对象\r\n     * @param viewer \r\n     * @param options \r\n     * @constructor\r\n     */\n    function _(viewer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (viewer && viewer instanceof Cesium.Viewer) {\n        this._drawLayer = new Cesium.CustomDataSource('measureLayer');\n        viewer && viewer.dataSources.add(this._drawLayer);\n        this._basePath = options.basePath || '';\n        this._viewer = viewer;\n      }\n    }\n    _.prototype = {\n      /***\r\n       * 坐标转换 84转笛卡尔\r\n       * \r\n       * @param {Object} {lng,lat,alt} 地理坐标\r\n       * \r\n       * @return {Object} Cartesian3 三维位置坐标\r\n       */\n      transformWGS84ToCartesian: function transformWGS84ToCartesian(position, alt) {\n        if (this._viewer) {\n          return position ? Cesium.Cartesian3.fromDegrees(position.lng || position.lon, position.lat, position.alt = alt || position.alt, Cesium.Ellipsoid.WGS84) : Cesium.Cartesian3.ZERO;\n        }\n      },\n      /***\r\n      * 坐标数组转换 笛卡尔转84\r\n      * \r\n      * @param {Array} WSG84Arr {lng,lat,alt} 地理坐标数组\r\n      * @param {Number} alt 拔高\r\n      * @return {Array} Cartesian3 三维位置坐标数组\r\n      */\n      transformWGS84ArrayToCartesianArray: function transformWGS84ArrayToCartesianArray(WSG84Arr, alt) {\n        if (this._viewer && WSG84Arr) {\n          var $this = this;\n          return WSG84Arr ? WSG84Arr.map(function (item) {\n            return $this.transformWGS84ToCartesian(item, alt);\n          }) : [];\n        }\n      },\n      /***\r\n       * 坐标转换 笛卡尔转84\r\n       * \r\n       * @param {Object} Cartesian3 三维位置坐标\r\n       * \r\n       * @return {Object} {lng,lat,alt} 地理坐标\r\n       */\n      transformCartesianToWGS84: function transformCartesianToWGS84(cartesian) {\n        if (this._viewer && cartesian) {\n          var ellipsoid = Cesium.Ellipsoid.WGS84;\n          var cartographic = ellipsoid.cartesianToCartographic(cartesian);\n          return {\n            lng: Cesium.Math.toDegrees(cartographic.longitude),\n            lat: Cesium.Math.toDegrees(cartographic.latitude),\n            alt: cartographic.height\n          };\n        }\n      },\n      /***\r\n      * 坐标数组转换 笛卡尔转86\r\n      * \r\n      * @param {Array} cartesianArr 三维位置坐标数组\r\n      * \r\n      * @return {Array} {lng,lat,alt} 地理坐标数组\r\n      */\n      transformCartesianArrayToWGS84Array: function transformCartesianArrayToWGS84Array(cartesianArr) {\n        if (this._viewer) {\n          var $this = this;\n          return cartesianArr ? cartesianArr.map(function (item) {\n            return $this.transformCartesianToWGS84(item);\n          }) : [];\n        }\n      },\n      /**\r\n       * 84坐标转弧度坐标\r\n       * @param {Object} position wgs84\r\n       * @return {Object} Cartographic 弧度坐标\r\n       * \r\n       */\n      transformWGS84ToCartographic: function transformWGS84ToCartographic(position) {\n        return position ? Cesium.Cartographic.fromDegrees(position.lng || position.lon, position.lat, position.alt) : Cesium.Cartographic.ZERO;\n      },\n      /**\r\n      * 拾取位置点\r\n      * \r\n      * @param {Object} px 屏幕坐标\r\n      * \r\n      * @return {Object} Cartesian3 三维坐标\r\n      */\n      getCatesian3FromPX: function getCatesian3FromPX(px) {\n        if (this._viewer && px) {\n          var picks = this._viewer.scene.drillPick(px);\n          var cartesian = null;\n          var isOn3dtiles = false,\n            isOnTerrain = false;\n          // drillPick\n          for (var i in picks) {\n            var pick = picks[i];\n            if (pick && pick.primitive instanceof Cesium.Cesium3DTileFeature || pick && pick.primitive instanceof Cesium.Cesium3DTileset || pick && pick.primitive instanceof Cesium.Model) {\n              //模型上拾取\n              isOn3dtiles = true;\n            }\n            // 3dtilset\n            if (isOn3dtiles) {\n              this._viewer.scene.pick(px); // pick\n              cartesian = this._viewer.scene.pickPosition(px);\n              if (cartesian) {\n                var cartographic = Cesium.Cartographic.fromCartesian(cartesian);\n                if (cartographic.height < 0) cartographic.height = 0;\n                var lon = Cesium.Math.toDegrees(cartographic.longitude),\n                  lat = Cesium.Math.toDegrees(cartographic.latitude),\n                  height = cartographic.height;\n                cartesian = this.transformWGS84ToCartesian({\n                  lng: lon,\n                  lat: lat,\n                  alt: height\n                });\n              }\n            }\n          }\n          // 地形\n          var boolTerrain = this._viewer.terrainProvider instanceof Cesium.EllipsoidTerrainProvider;\n          // Terrain\n          if (!isOn3dtiles && !boolTerrain) {\n            var ray = this._viewer.scene.camera.getPickRay(px);\n            if (!ray) return null;\n            cartesian = this._viewer.scene.globe.pick(ray, this._viewer.scene);\n            isOnTerrain = true;\n          }\n          // 地球\n          if (!isOn3dtiles && !isOnTerrain && boolTerrain) {\n            cartesian = this._viewer.scene.camera.pickEllipsoid(px, this._viewer.scene.globe.ellipsoid);\n          }\n          if (cartesian) {\n            var position = this.transformCartesianToWGS84(cartesian);\n            if (position.alt < 0) {\n              cartesian = this.transformWGS84ToCartesian(position, 0.1);\n            }\n            return cartesian;\n          }\n          return false;\n        }\n      },\n      /**\r\n       * 获取84坐标的距离\r\n       * @param {*} positions \r\n       */\n      getPositionDistance: function getPositionDistance(positions) {\n        var distance = 0;\n        for (var i = 0; i < positions.length - 1; i++) {\n          var point1cartographic = this.transformWGS84ToCartographic(positions[i]);\n          var point2cartographic = this.transformWGS84ToCartographic(positions[i + 1]);\n          var geodesic = new Cesium.EllipsoidGeodesic();\n          geodesic.setEndPoints(point1cartographic, point2cartographic);\n          var s = geodesic.surfaceDistance;\n          s = Math.sqrt(Math.pow(s, 2) + Math.pow(point2cartographic.height - point1cartographic.height, 2));\n          distance = distance + s;\n        }\n        return distance.toFixed(3);\n      },\n      /**\r\n      * 计算一组坐标组成多边形的面积\r\n      * @param {*} positions \r\n      */\n      getPositionsArea: function getPositionsArea(positions) {\n        var result = 0;\n        if (positions) {\n          var h = 0;\n          var ellipsoid = Cesium.Ellipsoid.WGS84;\n          positions.push(positions[0]);\n          for (var i = 1; i < positions.length; i++) {\n            var oel = ellipsoid.cartographicToCartesian(this.transformWGS84ToCartographic(positions[i - 1]));\n            var el = ellipsoid.cartographicToCartesian(this.transformWGS84ToCartographic(positions[i]));\n            h += oel.x * el.y - el.x * oel.y;\n          }\n          result = Math.abs(h).toFixed(2);\n        }\n        return result;\n      },\n      /**\r\n       * 测距\r\n       * @param {*} options \r\n       */\n      drawLineMeasureGraphics: function drawLineMeasureGraphics() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this._viewer && options) {\n          //添加坐标点\n          var _addInfoPoint = function _addInfoPoint(position) {\n            _labelEntity = new Cesium.Entity();\n            _labelEntity.position = position;\n            _labelEntity.point = {\n              pixelSize: 10,\n              outlineColor: Cesium.Color.BLUE,\n              outlineWidth: 5\n            };\n            _labelEntity.label = {\n              text: ($this.getPositionDistance($this.transformCartesianArrayToWGS84Array(positions)) / 1000).toFixed(4) + '公里',\n              show: true,\n              showBackground: true,\n              font: '14px monospace',\n              horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n              verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n              pixelOffset: new Cesium.Cartesian2(-20, -80) //left top\n            };\n\n            $this._drawLayer.entities.add(_labelEntity);\n          };\n          var positions = [],\n            _lineEntity = new Cesium.Entity(),\n            $this = this,\n            lineObj,\n            _handlers = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas);\n          // left\n          _handlers.setInputAction(function (movement) {\n            var cartesian = $this.getCatesian3FromPX(movement.position);\n            if (cartesian && cartesian.x) {\n              if (positions.length == 0) {\n                positions.push(cartesian.clone());\n              }\n              // 添加量测信息点\n              _addInfoPoint(cartesian);\n              positions.push(cartesian);\n            }\n          }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n          _handlers.setInputAction(function (movement) {\n            var cartesian = $this.getCatesian3FromPX(movement.endPosition);\n            if (positions.length >= 2) {\n              if (cartesian && cartesian.x) {\n                positions.pop();\n                positions.push(cartesian);\n              }\n            }\n          }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n          // right\n          _handlers.setInputAction(function (movement) {\n            _handlers.destroy();\n            _handlers = null;\n            var cartesian = $this.getCatesian3FromPX(movement.position);\n            _addInfoPoint(cartesian);\n            if (typeof options.callback === 'function') {\n              options.callback($this.transformCartesianArrayToWGS84Array(positions), lineObj);\n            }\n          }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n          _lineEntity.polyline = {\n            width: options.width || 5,\n            material: options.material || Cesium.Color.BLUE.withAlpha(0.8),\n            clampToGround: options.clampToGround || false\n          };\n          _lineEntity.polyline.positions = new Cesium.CallbackProperty(function () {\n            return positions;\n          }, false);\n          lineObj = this._drawLayer.entities.add(_lineEntity);\n        }\n      },\n      /**\r\n       * 测面积\r\n       * @param {*} options \r\n       */\n      drawAreaMeasureGraphics: function drawAreaMeasureGraphics() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this._viewer && options) {\n          var create = function create() {\n            _polygonEntity.polyline = {\n              width: 3,\n              material: Cesium.Color.BLUE.withAlpha(0.8),\n              clampToGround: options.clampToGround || false\n            };\n            _polygonEntity.polyline.positions = new Cesium.CallbackProperty(function () {\n              return positions;\n            }, false);\n            _polygonEntity.polygon = {\n              hierarchy: new Cesium.CallbackProperty(function () {\n                return polygon;\n              }, false),\n              material: Cesium.Color.WHITE.withAlpha(0.1),\n              clampToGround: options.clampToGround || false\n            };\n            polyObj = $this._drawLayer.entities.add(_polygonEntity);\n          };\n          var _addInfoPoint = function _addInfoPoint(position) {\n            var _labelEntity = new Cesium.Entity();\n            _labelEntity.position = position;\n            _labelEntity.point = {\n              pixelSize: 10,\n              outlineColor: Cesium.Color.BLUE,\n              outlineWidth: 5\n            };\n            _labelEntity.label = {\n              text: ($this.getPositionsArea($this.transformCartesianArrayToWGS84Array(positions)) / 1000000.0).toFixed(4) + '平方公里',\n              show: true,\n              showBackground: true,\n              font: '14px monospace',\n              horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n              verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n              pixelOffset: new Cesium.Cartesian2(-20, -50) //left top\n            };\n\n            $this._drawLayer.entities.add(_labelEntity);\n          };\n          var positions = [],\n            polygon = new Cesium.PolygonHierarchy(),\n            _polygonEntity = new Cesium.Entity(),\n            $this = this,\n            polyObj = null,\n            _label = '',\n            _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas);\n          // left\n          _handler.setInputAction(function (movement) {\n            var cartesian = $this.getCatesian3FromPX(movement.position);\n            if (cartesian && cartesian.x) {\n              if (positions.length == 0) {\n                polygon.positions.push(cartesian.clone());\n                positions.push(cartesian.clone());\n              }\n              positions.push(cartesian.clone());\n              polygon.positions.push(cartesian.clone());\n              if (!polyObj) create();\n            }\n          }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n          // mouse\n          _handler.setInputAction(function (movement) {\n            var cartesian = $this.getCatesian3FromPX(movement.endPosition);\n            // var cartesian = $this._viewer.scene.camera.pickEllipsoid(movement.endPosition, $this._viewer.scene.globe.ellipsoid);\n            if (positions.length >= 2) {\n              if (cartesian && cartesian.x) {\n                positions.pop();\n                positions.push(cartesian);\n                polygon.positions.pop();\n                polygon.positions.push(cartesian);\n              }\n            }\n          }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n          // right\n          _handler.setInputAction(function (movement) {\n            var cartesian = $this.getCatesian3FromPX(movement.endPosition);\n            _handler.destroy();\n            positions.push(positions[0]);\n\n            // 添加信息点\n            _addInfoPoint(positions[0]);\n            if (typeof options.callback === 'function') {\n              options.callback($this.transformCartesianArrayToWGS84Array(positions), polyObj);\n            }\n          }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n        }\n      },\n      /**\r\n       * 画三角量测\r\n       * @param {*} options \r\n       */\n      drawTrianglesMeasureGraphics: function drawTrianglesMeasureGraphics() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        options.style = options.style || {\n          width: 3,\n          material: Cesium.Color.BLUE.withAlpha(0.5)\n        };\n        if (this._viewer && options) {\n          // 高度\n          var _getHeading = function _getHeading(startPosition, endPosition) {\n            if (!startPosition && !endPosition) return 0;\n            if (Cesium.Cartesian3.equals(startPosition, endPosition)) return 0;\n            var cartographic = Cesium.Cartographic.fromCartesian(startPosition);\n            var cartographic2 = Cesium.Cartographic.fromCartesian(endPosition);\n            return (cartographic2.height - cartographic.height).toFixed(2);\n          }; // 偏移点\n          var _computesHorizontalLine = function _computesHorizontalLine(positions) {\n            var cartographic = Cesium.Cartographic.fromCartesian(positions[0]);\n            var cartographic2 = Cesium.Cartographic.fromCartesian(positions[1]);\n            return Cesium.Cartesian3.fromDegrees(Cesium.Math.toDegrees(cartographic.longitude), Cesium.Math.toDegrees(cartographic.latitude), cartographic2.height);\n          }; // left\n          var _trianglesEntity = new Cesium.Entity(),\n            _tempLineEntity = new Cesium.Entity(),\n            _tempLineEntity2 = new Cesium.Entity(),\n            _positions = [],\n            _tempPoints = [],\n            _tempPoints2 = [],\n            $this = this,\n            _handler = new Cesium.ScreenSpaceEventHandler(this._viewer.scene.canvas);\n          _handler.setInputAction(function (movement) {\n            var position = $this.getCatesian3FromPX(movement.position);\n            if (!position && !position.z) return false;\n            if (_positions.length == 0) {\n              _positions.push(position.clone());\n              _positions.push(position.clone());\n              _tempPoints.push(position.clone());\n              _tempPoints.push(position.clone());\n            } else {\n              _handler.destroy();\n              if (typeof options.callback === 'function') {\n                options.callback({\n                  e: _trianglesEntity,\n                  e2: _tempLineEntity,\n                  e3: _tempLineEntity2\n                });\n              }\n            }\n          }, Cesium.ScreenSpaceEventType.LEFT_CLICK);\n          // mouse\n          _handler.setInputAction(function (movement) {\n            var position = $this.getCatesian3FromPX(movement.endPosition);\n            if (position && _positions.length > 0) {\n              //直线\n              _positions.pop();\n              _positions.push(position.clone());\n              var horizontalPosition = _computesHorizontalLine(_positions);\n              //高度\n              _tempPoints.pop();\n              _tempPoints.push(horizontalPosition.clone());\n              //水平线\n              _tempPoints2.pop();\n              _tempPoints2.pop();\n              _tempPoints2.push(position.clone());\n              _tempPoints2.push(horizontalPosition.clone());\n            }\n          }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);\n\n          // create entity\n\n          //直线\n          _trianglesEntity.polyline = _objectSpread({\n            positions: new Cesium.CallbackProperty(function () {\n              return _positions;\n            }, false)\n          }, options.style);\n          _trianglesEntity.position = new Cesium.CallbackProperty(function () {\n            return _positions[0];\n          }, false);\n          _trianglesEntity.point = {\n            pixelSize: 5,\n            outlineColor: Cesium.Color.BLUE,\n            outlineWidth: 5\n          };\n          _trianglesEntity.label = {\n            text: new Cesium.CallbackProperty(function () {\n              return '直线:' + $this.getPositionDistance($this.transformCartesianArrayToWGS84Array(_positions)) + '米';\n            }, false),\n            show: true,\n            showBackground: true,\n            font: '14px monospace',\n            horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n            pixelOffset: new Cesium.Cartesian2(50, -100) //left top\n          };\n          //高度\n          _tempLineEntity.polyline = _objectSpread({\n            positions: new Cesium.CallbackProperty(function () {\n              return _tempPoints;\n            }, false)\n          }, options.style);\n          _tempLineEntity.position = new Cesium.CallbackProperty(function () {\n            return _tempPoints2[1];\n          }, false);\n          _tempLineEntity.point = {\n            pixelSize: 5,\n            outlineColor: Cesium.Color.BLUE,\n            outlineWidth: 5\n          };\n          _tempLineEntity.label = {\n            text: new Cesium.CallbackProperty(function () {\n              return '高度:' + _getHeading(_tempPoints[0], _tempPoints[1]) + '米';\n            }, false),\n            show: true,\n            showBackground: true,\n            font: '14px monospace',\n            horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n            pixelOffset: new Cesium.Cartesian2(-20, 100) //left top\n          };\n          //水平\n          _tempLineEntity2.polyline = _objectSpread({\n            positions: new Cesium.CallbackProperty(function () {\n              return _tempPoints2;\n            }, false)\n          }, options.style);\n          _tempLineEntity2.position = new Cesium.CallbackProperty(function () {\n            return _positions[1];\n          }, false);\n          _tempLineEntity2.point = {\n            pixelSize: 5,\n            outlineColor: Cesium.Color.BLUE,\n            outlineWidth: 5\n          };\n          _tempLineEntity2.label = {\n            text: new Cesium.CallbackProperty(function () {\n              return '水平距离:' + $this.getPositionDistance($this.transformCartesianArrayToWGS84Array(_tempPoints2)) + '米';\n            }, false),\n            show: true,\n            showBackground: true,\n            font: '14px monospace',\n            horizontalOrigin: Cesium.HorizontalOrigin.LEFT,\n            verticalOrigin: Cesium.VerticalOrigin.BOTTOM,\n            pixelOffset: new Cesium.Cartesian2(-150, -20) //left top\n          };\n\n          this._drawLayer.entities.add(_tempLineEntity2);\n          this._drawLayer.entities.add(_tempLineEntity);\n          this._drawLayer.entities.add(_trianglesEntity);\n        }\n      }\n    };\n    return _;\n  }(Cesium);\n\n//# sourceURL=webpack://cesium-study-demo/./plugin/cesium-measure.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./plugin/cesium-measure.js"]();
/******/ 	CesiumMeasure = __webpack_exports__;
/******/ 	
/******/ })()
;